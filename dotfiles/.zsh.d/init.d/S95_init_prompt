#!/bin/zsh
#
# Let's get some prompt action onnnn
#
# Setup PS1

autoload -Uz add-zsh-hook

# evaluate functions inside $PS1
setopt prompt_subst

# show rbenv info
if [[ $jb_rbenv_present == 1 ]]; then
    jb_rbenv_prompt() {
        echo -n " $jb_rbenv_ps1"
    }

    jb_update_rbenv_prompt() {
        local jb_rbenv_info
        jb_rbenv_info=`rbenv version | cut -f 1 -d \ `@[`rbenv gemset active 2>&/dev/null`]
        jb_rbenv_ps1="%Brbenv:%b$cb[yellow]$jb_rbenv_info$cb[none]"
    }

    add-zsh-hook chpwd jb_update_rbenv_prompt
fi

function jb_prompt_init() {
    local jb_ps_info
    jb_ps_info=''

    # Hostname and pwd
    jb_ps_info+="%B%m%b:$cb[cyan]%~$cb[none]"

    # Git status info for pwd
    jb_ps_info+='$(jb_git_ps1)'

    # rbenv current ruby@gemset
    [[ $jb_rbenv_present == 1 ]] && jb_ps_info+='$(jb_rbenv_prompt)'

    # Number of background jobs (if any)
    jb_ps_info+="%(1j:$cb[magenta] [+%j]$cb[none]:)"

    # Exit status of last job (if non-zero)
    jb_ps_info+="%(?..$cb[red] [%?]$cb[none])"

    # The multiline prmopt
    PS1="$jb_ps_info
%B%#%b "

}

# From Robert's dotto code.
# https://github.com/rsanders/dotto/raw/stable/zsh/functions/display_dimensions
function display_dimensions() {
  emulate -L zsh

  local string="$1" width=${2:-$COLUMNS}
  typeset -L -i 10 lines=0

  local -E divisor=0.0
  local -E split=0.0 rem=0.0

  (( divisor = ${COLUMNS} + 0.0 ))

  for line in "${(f)string}"; do
      (( split = $#line / $divisor ))
      (( rem = $#line % $divisor ))
      (( lines = lines + $split ))
      if [[ "$rem" -gt 0 ]]; then
          (( lines = lines + 1 ))
      fi
  done

  REPLY=$lines
  printf "%d\n" "$lines"
}

# Also from Robert's dotto code. Replaced echotc with terminfo.
# https://github.com/rsanders/dotto/raw/stable/zsh/themes/prompt_rsbox_setup
function prompt_rsbox_eraseprompt() {
    emulate -L zsh

    local typed="$1"
    local i upcount

    local visible="# ${typed}"
    local visiblesize=""

    display_dimensions "$visible" > /dev/null && visiblesize=$REPLY

    (( upcount = 1 + ${visiblesize} ))

    local up=$terminfo[cuu1] el=$terminfo[el] out=""
    if [ $upcount -lt $LINES ]; then
        for (( i=0; i < $upcount; i++ )); do
            out+="${up}${el}"
        done
        echo -n -E "${out}${el}"
    fi
}

# From Robert's rsbox prompt
# must be an empty cmd line; just clear and redraw prompt one line down
function jb_prompt_precmd() {
		if [[ $jb_preexec_ran == 0 ]]; then
				prompt_rsbox_eraseprompt
				print -P "$cb[green]%# $cb[none]"
    fi
    jb_preexec_ran=0
}

function jb_prompt_preexec() {
    local cmd=$1 last=$?
    prompt_rsbox_eraseprompt "$cmd"

    if [[ $last != 0 ]]; then
				echo `print -P "$cb[red][$last]$cb[none]"`
    fi

    # print -P "..$cmd.." will expand $cmd as part of prompt substitution
    # so compute the prompt subst bits separately
    local start=`print -P "$cb[green]%#"`
    local end=`print -P "$cb[none]"`
    echo "${start} ${cmd}${end}"

    jb_preexec_ran=1
}

## TODO : Include is-at-least
# prior to 4.3.15, zsh redraws what it assumes is a one-line prompt on
# SIGWINCH, leaving bits of the old prompt on screen.
#
# trap the signal and handle the redraw ourselves if needed.
# is-at-least 4.3.15 || function TRAPWINCH() {
#     true # reset $?
#     jb_prompt_preexec
#     return 0
# }

if [[ $TERM = dumb ]]; then
    PS1='%# '
else
    jb_prompt_init
		add-zsh-hook precmd jb_prompt_precmd
		add-zsh-hook preexec jb_prompt_preexec
fi
